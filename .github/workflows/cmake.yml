name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    env: ${{ matrix.env }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            env:
              BUILD_TYPE: Debug
          - os: macos-12
            env:
              BUILD_TYPE: Debug
              CMAKE_GENERATOR: Xcode
          #- os: self-hosted
          #  env:
          #    BUILD_TYPE: Debug
          #    MACOSX_DEPLOYMENT_TARGET: 10.15
          #    CMAKE_GENERATOR: Xcode

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: add Debian Packages
      if: matrix.os == 'ubuntu-latest'
      uses: myci-actions/add-deb-repo@10
      with:
        repo-name: obs
        repo: deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_22.04/ ./
        keys-asc: https://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_22.04/Release.key
        install: meson flex bison libunistring-dev nasm libzmq5 libzmq3-dev libczmq-dev libglx-dev mesa-common-dev libasound2-dev libglew-dev libunwind-dev libmicrohttpd-dev

    - name: Add brew packages
      if: ${{ contains( matrix.os, 'macos' ) }}
      shell: bash
      run: brew install meson flex bison nasm automake libmicrohttpd cairo ffmpeg gtk+3 gtk4 lame libsoup x264 dav1d glib glib-networking graphene json-glib openssl@3 xz openexr

    - name: Gstreamer
      run: |
        git clone --branch 1.18 https://github.com/GStreamer/gst-build.git
        cd gst-build
        pip3 install --user meson
        meson builddir
        ninja -C builddir

    - name: Configure CMake
      run: |
        cd gst-build/builddir
        ninja -v devenv
        cd -
        env
        gst-launch-1.0 --gst-version
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} $CMAKE_OPTIONS
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
